name: Nightly

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cargo Cache
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}
          ${{ runner.os }}-cargo

    - name: Cargo Target Cache
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-${{ hashFiles('Cargo.toml') }}
          ${{ runner.os }}-cargo-target
    - name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
    - name: Run cargo check
      uses: actions-rs/cargo@v1
      with:
        command: check
    - name: Run cargo test
      uses: actions-rs/cargo@v1
      with:
        command: test --verbose --doc

    - name: Upload WMS Artefact
      uses: actions/upload-artifact@v2.2.1
      with:
        name: wms
        path: target/release/wms
        if-no-files-found: error
        retention-days: 90
    - name: Upload Geoconv artefact
      uses: actions/upload-artifact@v2.2.1
      with:
        name: geoconv
        path: target/release/geoconv
        if-no-files-found: error
        retention-days: 90

  test-mac-win:
    name: Test Rust ${{ matrix.rust }} on ${{ matrix.os }}
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - { rust: nightly,            os: macos-latest }
        - { rust: nightly,            os: windows-latest }
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - run: cargo test --verbose --workspace
